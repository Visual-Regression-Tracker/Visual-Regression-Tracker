version: '3.2'

services:
  ui:
    image: visualregressiontracker/ui:${VRT_VERSION}
    ports:
      - "${PORT}:8080"
    # https config
    #   - "8080:8080"
    #   - "${PORT}:5000"
    # volumes:
    #   - ./ssl/ssl.cert:/etc/nginx/secrets/ssl.cert
    #   - ./ssl/ssl.key:/etc/nginx/secrets/ssl.key
    #   - ./ssl/default.conf:/etc/nginx/conf.d/default.conf
    #   - ./ssl/nginx.conf:/etc/nginx/nginx.conf
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
    restart: always
  api:
    image: visualregressiontracker/api:${VRT_VERSION}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_LIFE_TIME: ${JWT_LIFE_TIME}
      APP_FRONTEND_URL: ${APP_FRONTEND_URL}
      BODY_PARSER_JSON_LIMIT: ${BODY_PARSER_JSON_LIMIT}
    ports:
      - "${APP_PORT}:3000"
    volumes:
      - ./imageUploads:/imageUploads
      # https config
      # - ./ssl/ssl.cert:/secrets/ssl.cert
      # - ./ssl/ssl.key:/secrets/ssl.key
    depends_on:
      - postgres
    restart: always
  migration:
    image: visualregressiontracker/migration:${VRT_VERSION}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 120s
      retries: 10

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
#      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    user: root
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk
    depends_on:
      - kibana

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
